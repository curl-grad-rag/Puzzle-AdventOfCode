from functions import *

### DAY 1 ###
# inp_vals = dat2numarr('c:/Users/rjjumade/Personal/My Codes/Advent2019/day1.dat')
# fuels_vals1 = []
# fuels_vals2 = []
# for i in inp_vals:
    # fuels_vals1.append(convert2fuel(i))
    # fuels_vals2.append(findTotFuel(i))

#Answers
# print("0.0 Answer : {}".format(sum(fuels_vals1)))
# print("0.1 Answer : {}".format(sum(fuels_vals2)))



### DAY 2 ###
# inp_vals = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,13,19,1,10,19,23,2,9,23,27,1,6,27,31,1,10,31,35,1,35,10,39,1,9,39,43,1,6,43,47,1,10,47,51,1,6,51,55,2,13,55,59,1,6,59,63,1,10,63,67,2,67,9,71,1,71,5,75,1,13,75,79,2,79,13,83,1,83,9,87,2,10,87,91,2,91,6,95,2,13,95,99,1,10,99,103,2,9,103,107,1,107,5,111,2,9,111,115,1,5,115,119,1,9,119,123,2,123,6,127,1,5,127,131,1,10,131,135,1,135,6,139,1,139,5,143,1,143,9,147,1,5,147,151,1,151,13,155,1,5,155,159,1,2,159,163,1,163,6,0,99,2,0,14,0]
# inp_vals[1] = 12
# inp_vals[2] = 2
# intcode(inp_vals)
# print("1.0 Answer : {}".format(inp_vals[0]))
# 
# for noun in range(100):
    # for verb in range(100):
        # inp_vals = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,13,19,1,10,19,23,2,9,23,27,1,6,27,31,1,10,31,35,1,35,10,39,1,9,39,43,1,6,43,47,1,10,47,51,1,6,51,55,2,13,55,59,1,6,59,63,1,10,63,67,2,67,9,71,1,71,5,75,1,13,75,79,2,79,13,83,1,83,9,87,2,10,87,91,2,91,6,95,2,13,95,99,1,10,99,103,2,9,103,107,1,107,5,111,2,9,111,115,1,5,115,119,1,9,119,123,2,123,6,127,1,5,127,131,1,10,131,135,1,135,6,139,1,139,5,143,1,143,9,147,1,5,147,151,1,151,13,155,1,5,155,159,1,2,159,163,1,163,6,0,99,2,0,14,0]
        # inp_vals[1] = noun
        # inp_vals[2] = verb
        # intcode(inp_vals)
        # if inp_vals[0] == 19690720:
            # print("1.1 Answer : {}, {}, {}".format(noun, verb, 100*noun + verb))




### DAY 3 ###
# path1Instr = ["R992","U221","L822","U805","R667","D397","L969","U433","R918","D517","L494","U909","L224","D738","R247","D312","L803","D656","L571","D968","L392","D332","L581","U487","R522","D780","L74","D561","L246","U380","L125","U11","R735","D761","R482","D208","R985","D991","L352","U140","L586","D492","L777","U96","R682","D969","R775","U279","R671","D423","R838","U907","L486","D702","L432","D625","R463","U559","R12","D531","R510","D347","R147","U949","R175","U160","L975","D627","L537","D343","L406","D237","R953","U725","L996","D740","L703","D996","R157","U356","R247","D541","L592","D345","R580","U656","R50","D423","L158","U502","L86","U729","L720","D464","R901","D739","L20","U21","R497","D14","L580","U610","L114","D858","R853","U550","L354","D433","L507","U144","R9","U422","R674","U604","R107","D999","L420","U675","R538","D491","R84","D158","R303","D450","L616","U938","L162","U102","L160","U275","L281","D164","L254","U103","R60","D707","R655","U128","L907","U225","L292","U919","R517","D276","R308","D113","L455","U584","R899","U321","L417","U449","L780","U387","L579","U224","L192","D325","L626","U145","R178","D162","L18","D469","R169","U694","R162","D806","L10","U979","L944","D304","R719","D253","L343","D711","R429","D933","R445","D772","R230","D407","R335","U883","L900","D377","R413","D44","R805","D378","R421","D860","L597","U63","L583","D561","R235","D502","L37","U29","L381","U803","R588","D972","R678","D223","L440","U835","R88","D16","R529","D867","R742","U25","R353","D952","R31","D202","R737","D744","R765","U154","L969","U851","L22","U165","L12","D457","R635","U829","L996","D871","L397","U995","R215","D505","R93","U12","R183","D920","L442","D393","L919","D803","R22","D806","R776","U558","R263","D222","R111","D530","L908","D640","R351","D172","R315","U731","R25","U718","L172","D145","L606","U803","R837","U310","L607","D523","R271","U927","R3","U518","R754","D322","L924","D256","L997","U153","L904","D745","L475","U346","L979","D658","R208","U924","L484","U961","R94","D283","L79","U927","R122","D513","L806","D480","L971","U340","R328","D427","L494"]
# path2Instr = ["L998","U308","R889","D471","R719","U326","L6","U802","L608","U149","R454","U6","R837","U255","L720","D60","L426","D525","L190","U995","R676","U172","R910","U645","R249","D725","R355","U668","L988","U253","L820","D266","R836","D750","R998","U113","L502","U634","L620","U903","L542","D426","L497","D766","R930","U415","R655","D676","L694","D548","L280","U895","L899","U235","R912","D257","R161","D834","R88","D379","L723","U508","L604","D1","R706","D321","R725","U986","R52","D741","L738","D810","R595","U352","L835","D712","R797","D332","L451","D145","L608","U940","R886","D945","R929","D4","R332","D303","L877","D927","R686","U762","L588","D496","R352","D516","R355","D299","L459","D831","R9","U322","R635","U895","L127","U27","R996","D491","L360","U921","L146","U833","L420","D60","R32","D936","R815","D451","R715","U570","R889","D35","R135","U814","L559","D141","L470","U410","L711","D668","L196","U42","R989","U448","L875","U417","R554","U61","R259","D111","L177","D147","L925","D427","R911","U667","L209","U641","L516","U521","R373","D165","L91","U594","R968","U536","L694","U270","R602","U92","L158","U321","R422","D851","L73","D492","L698","D950","L988","U48","L184","D99","R67","D168","R269","D918","L645","D736","L597","U104","L427","U72","R568","D749","R16","U190","L146","D911","L820","D275","R12","U402","R461","D595","L103","D326","R948","U288","L1","D786","R698","D286","L557","U283","R278","U327","R457","D136","L878","D23","L371","U836","R987","U695","R904","U395","R869","U276","R310","D843","L994","D209","R554","U653","L924","U659","R695","U779","L427","U504","R711","D679","R191","D775","R816","D293","L415","D323","R505","U154","R966","U446","R837","U707","L591","D593","L696","U168","R35","U905","R141","U708","L772","D898","R254","U612","R934","U114","R912","D576","L721","D965","R731","U737","R494","D760","R909","D244","R662","D863","L23","D298","L234","D476","L571","D786","L48","U960","L377","U134","R335","D453","R203","D120","L27","U365","R254","U446","R738","D919","L42","U529","R31","D104","R583","U272","R867","U834","L43","D220","R424"]
# path1X, path1Y, path1XY = obtainPath(path1Instr)
# path2X, path2Y, path2XY = obtainPath(path2Instr)
# crossings = list(set(path1XY).intersection(set(path2XY)))
# distances = []
# steps = []
# for crossing in crossings:
    # distances.append(abs(crossing[0]) + abs(crossing[1]))
    # steps.append(path1XY.index(crossing) + path2XY.index(crossing))
# print("2.0 Answer : {}".format(sorted(distances)[1]))
# print(path1XY.index((0,0)))
# print("2.1 Answer : {}".format(sorted(steps)[1]))




### DAY 4 ###
# validOpts = findPossiblePass(145852, 616942)
# print("3.0 Answer : {}".format(len(validOpts)))
# 
# validOptsRed = reducePassPossibilities(validOpts)
# print("3.1 Answer : {}".format(len(validOptsRed)))




### DAY 5 ###
inp_vals = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226]
enhancedIntCode(inp_vals)